{"docs":[{"_id":"_design/imputedchecks","language":"javascript","views":{"missing_wim_neighbors":{"map":"function(doc) {\n  var district_regex = new RegExp(\"(\\\\d{1,2})\\\\d{5}\");\n  var yearmatch = new RegExp(\"^\\\\d{4}$\");\n  for(var k in  doc){\n     if(k !== '_id' && k !== '_rev'){\n        if(yearmatch.test(k) && k > 2006 && k < 2010 && (doc[k]['truckimputed'] === undefined || doc[k]['truckimputed'] !== 1 )  &&( doc[k].properties !== undefined && doc[k].properties[0].vdstype===\"ML\") && ( doc[k]['wim_neigbors'] === undefined || doc[k]['wim_neigbors'].length < 1 ) ){\n          var d = (district_regex(doc._id))[1];\n          d = d - 0.0\n \t  k = k - 0.0\n\t  var fwy = doc[k].properties[0].freeway - 0.0\n          emit([k,d,fwy],doc._id);\n        }\n     }\n  }\n}","reduce":"_count"},"truckimputed_no_csv_parse":{"map":"function(doc) {\n  var district_regex = new RegExp(\"(\\\\d{1,2})\\\\d{5}\");\n  var yearmatch = new RegExp(\"^\\\\d{4}$\");\n  for(var k in  doc){\n     if(k !== '_id' && k !== '_rev'){\n        if(yearmatch.test(k) && (doc[k]['truckimputed'] !== undefined && doc[k]['truckimputed'] === 1 )  &&( doc[k]['csv_parse'] === undefined ) ){\n          var d = (district_regex(doc._id))[1];\n          d = d - 0.0\n \t  k = k - 0.0\n          emit([d,k],doc._id);\n        }\n     }\n  }\n}","reduce":"_count"},"truckimputed_not_done":{"map":"function(doc) {\n  var district_regex = new RegExp(\"(\\\\d{1,2})\\\\d{5}\");\n  var yearmatch = new RegExp(\"^\\\\d{4}$\");\n  for(var k in  doc){\n     if(k !== '_id' && k !== '_rev'){\n        if(yearmatch.test(k) && (doc[k]['truckimputed'] !== undefined && doc[k]['truckimputed'] !== 1 )  ){\n          var d = (district_regex(doc._id))[1];\n          d = d - 0.0\n \t  k = k - 0.0\n          emit([d,k],doc._id);\n        }\n     }\n  }\n}","reduce":"_count"},"not_raw_imputed":{"map":"function(doc) {\n    var district_regex = new RegExp(\"(\\\\d{1,2})\\\\d{5}\");\n    var yearmatch = new RegExp(\"^\\\\d{4}$\");\n    var rejectmatch = new RegExp(\"rejected\");\n    for(var k in  doc){\n        if(k !== '_id' && k !== '_rev'){\n            if(yearmatch.test(k) \n             && k > 2006 \n             && (doc[k]['vdsraw_chain_lengths'] === undefined || (!Array.isArray(doc[k]['vdsraw_chain_lengths']) && ! rejectmatch.test(doc[k]['vdsraw_chain_lengths'])))\n             && (doc[k].properties !== undefined && doc[k].properties[0].vdstype===\"ML\")\n             && ( doc[k]['have_raw_data'] )\n           ){\n                var d = (district_regex(doc._id))[1];\n                var fwy = doc[k].properties[0].freeway\n                emit([+k,+d,+fwy],doc._id);\n            }\n        }\n    }\n}\n","reduce":"_count"}},"detached":{},"attachment_db":"http://127.0.0.1:5984/vdsdata%2ftracking"},{"_id":"_design/properties","language":"javascript","views":{"segment_length":{"map":"function(doc) {\n  var yearmatch = new RegExp(\"^\\\\d{4}$\");\n  for(var k in  doc){\n     if(k !== '_id' && k !== '_rev'){\n\tif(yearmatch.test(k) &&( doc[k]['27vars']===1 || doc[k]['27vars']==\"processed\" ) &&( doc[k].properties !== undefined && doc[k].properties[0].vdstype===\"ML\" ))\n         emit(k,doc[k].properties[0].segment_length);\n     }\n  }\n}","reduce":"_sum"},"segment_length_ml":{"map":"function(doc) {\n  var yearmatch = new RegExp(\"^\\\\d{4}$\");\n  for(var k in  doc){\n     if(k !== '_id' && k !== '_rev'){\n\tif(yearmatch.test(k) &&( doc[k].properties !== undefined && doc[k].properties[0].segment_length && doc[k].properties[0].vdstype===\"ML\" ))\n         emit([doc[k].properties[0].district,k - 0.0],doc[k].properties[0].segment_length);\n     }\n  }\n}","reduce":"_sum"},"count_up_lengths":{"map":"function(doc) {\n  var yearmatch = new RegExp(\"^\\\\d{4}$\");\n  for(var k in  doc){\n     if(k !== '_id' && k !== '_rev'){\n\tif(yearmatch.test(k) &&( doc[k].properties !== undefined && doc[k].properties[0].segment_length && doc[k].properties[0].vdstype===\"ML\" ))\n         emit([doc[k].properties[0].district,k - 0.0],doc[k].properties[0].segment_length);\n     }\n  }\n}","reduce":"_count"},"noproperties":{"map":"function(doc) {\n  var yearmatch = new RegExp(\"^\\\\d{4}$\");\n  var nope = true;\n  var nol = true;\n  for(var k in  doc){\n     if(yearmatch.test(k) &&( doc[k].properties !== undefined)){\n          nope=false;\n          if(doc[k].properties[0].lanes !== undefined) nol = false;\n     }\n     \n  }\n  if(nope)  emit([doc._id,'no properties'],null);\n  if(nol)  emit([doc._id,'no properties','no lanes'],null);\n}","reduce":"_count"}},"detached":{},"attachment_db":"http://127.0.0.1:5984/vdsdata%2ftracking"},{"_id":"_design/vds","language":"javascript","views":{"pairRData":{"map":"function(doc) {\n  var re = new RegExp(\"^wim\"); \n  if( ! re.test(doc._id) ){\n    var re2 = new RegExp(\"^wim.*paired\\.RData$\"); \n    var keys = Object.keys(doc._attachments);\n    var ys = keys.filter(function(k){return re2.test(k)});\n    \n    ys.forEach(function(y){\n      var parts=y.split('.')\n      emit([parts[5],doc._id,y],null)\n    })\n  }\n}","reduce":"_count"},"zero_length_imputation_plots":{"map":"function(doc) {\n  var re = new RegExp(\"wim\");\n  if( ! re.test(doc._id) ){\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    ys.forEach(function(y){\n      var re2 = new RegExp([y,\"imputed_trucks\"].join('_'));\n      var ays = Object.keys(doc._attachments).filter(function(k){return re2.test(k)});\n      if(ays && ays.length > 0){\n        var zerolength = ays.filter(function(k){ return doc._attachments[k]['length'] == 0 ; } )\n        if(zerolength.length>0){\n           emit([y,doc._id], null);\n        }\n      }\n    })\n  }\n}\n","reduce":"_count"},"raw_imputed_status":{"map":"function(doc) {\n    var re = new RegExp(\"^\\\\d+$\");\n    if( re.test(doc._id) ){\n        var year_regex = new RegExp(\"^\\\\d{4}$\");\n        var keys = Object.keys(doc);\n        var ys = keys.filter(function(k){return year_regex.test(k)});\n        ys.forEach(function(y){\n            var ml = (doc[y].properties !== undefined && doc[y].properties.length) ? doc[y].properties[0].vdstype==='ML' : false\n            // emit only if props[0].vdstype is mainline (ML)\n            if(ml){\n                if(doc[y+''].vdsraw_max_iterations === undefined && doc[y+''].vdsraw_chain_lengths === undefined){\n                    emit([+y,'unprocessed',+doc._id], null)\n                    return null\n                }\n                if(doc[y+''].vdsraw_max_iterations === 0){\n                    emit([+y,'finished',+doc._id], null)\n                    return null\n                }\n                emit([+y,'issues',+doc._id], null)\n            }\n            return null\n        })\n    }\n}\n","reduce":"_count"},"truckimputation_imputed_status":{"map":"function(doc) {\n    var re = new RegExp(\"^\\\\d+$\");\n    if( re.test(doc._id) ){\n        var year_regex = new RegExp(\"^\\\\d{4}$\");\n        var keys = Object.keys(doc);\n        var ys = keys.filter(function(k){return year_regex.test(k)});\n        ys.forEach(function(y){\n            var ml = (doc[y].properties !== undefined &&\n                      doc[y].properties.length) ?\n                    doc[y].properties[0].vdstype==='ML' : false\n            // emit only if props[0].vdstype is mainline (ML)\n            if(ml){\n                if((doc[y+''].vdsraw_max_iterations === undefined &&\n                    doc[y+''].vdsraw_chain_lengths === undefined)\n                   // raw unprocessed\n                   || \n                   doc[y+''].vdsraw_max_iterations !== 0\n                   // raw issues\n                  ){\n                      // in this case, raw is unprocessed or broken, \n                      // so cannot do truck imputation, emit such\n                      emit([+y,'rawunprocessed',+doc._id], null)\n                      return null\n                  }\n                // still here?  then raw completed, and we have something \n                // enlightening to say about truck imputation status\n                if(doc[y+''].truckimputation_max_iterations === undefined &&\n                   doc[y+''].truckimputation_chain_lengths === undefined){\n                    emit([+y,'unprocessed',+doc._id], null)\n                    return null\n                }\n                if(doc[y+''].truckimputation_max_iterations === 0){\n                    emit([+y,'finished',+doc._id], null)\n                    return null\n                }\n                emit([+y,'issues',+doc._id], null)\n            }\n            return null\n        })\n    }\n}\n","reduce":"_count"}},"detached":{},"attachment_db":"http://127.0.0.1:5984/vdsdata%2ftracking"},{"_id":"_design/vdsml","language":"javascript","views":{"mainline":{"map":"function(doc) {\n  var re = new RegExp(\"wim\");\n  if( ! re.test(doc._id) ){\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    // find a properties array of any sort\n    var props = ys.filter(function(y){return (doc[y].properties !== undefined && doc[y].properties.length ); }) \n    // emit only if props[0].vdstype is mainline (ML)\n    if(doc[props[0]].properties[0].vdstype==='ML'){\n        emit(doc._id - 0.0,null);\n    }\n  }\n}"}},"detached":{},"attachment_db":"http://127.0.0.1:5984/vdsdata%2ftracking"},{"_id":"_design/wim","language":"javascript","views":{"pair_check":{"map":"function(doc) {\n  var re = new RegExp(\"wim\"); \n  if( re.test(doc._id) ){\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    \n    ys.forEach(function(y){\n      var wim_dir = doc._id.split('.').slice(1);\n      if(doc[y].merged === undefined || doc[y].merged == 'todo'){\n        emit(['todo',y,wim_dir[0],wim_dir[1]], null);\n      }else if( doc[y].merged == 'nopair' ){\n       emit(['nopair',y,wim_dir[0],wim_dir[1]], null);\n      }\n    })\n  }\n}","reduce":"_count"},"chains_check":{"map":"function(doc) {\n  var re = new RegExp(\"wim\");\n  if( re.test(doc._id) ){\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    ys.forEach(function(y){\n      var wim_dir = doc._id.split('.').slice(1);\n      if(doc[y].chain_lengths === undefined ){\n        emit(['nochains',y,wim_dir[0],wim_dir[1]], null);\n      }else{\n\t      var long_chains = doc[y].chain_lengths.filter(function(c){ return c == 200; })\n          if(long_chains.length > 2 ){\n              var re2 = new RegExp([y,\"agg.redo\"].join('_'));\n              var akeys = Object.keys(doc._attachments);\n              var ays = akeys.filter(function(k){return re2.test(k)});\n              if(ays.length==0){\n                  emit(['longchains',y,wim_dir[0],wim_dir[1]], null);\n              }else{\n                  //emit(ays,null)\n                  var attlist = ays.map(function(p){return [doc._id,p].join('/'); });\n                  emit(['plottedlongchains',y,wim_dir[0],wim_dir[1]]\n                       ,attlist);\n              }\n          }\n      }\n    })\n  }\n}\n"},"aggregate_plots":{"map":"function(doc) {\n  var re = new RegExp(\"^wim\"); \n  if( re.test(doc._id) ){\n    var re2 = new RegExp(\"agg.redo\");\n    var akeys = Object.keys(doc._attachments);\n    var ays = akeys.filter(function(k){return re2.test(k)});\n   \n    ays.forEach(function(y){\n      var parts=y.split(/\\.|_/)\n      emit([parts[2],parts[0],parts[1]],[doc._id,y].join('/'))\n    })\n  }\n}"},"no_aggplots":{"map":"function(doc) {\n  var re = new RegExp(\"wim\");\n  if( re.test(doc._id) ){\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    ys.forEach(function(y){\n      var wim_dir = doc._id.split('.').slice(1);\n      var re2 = new RegExp([y,\"agg.redo\"].join('_'));\n      var akeys = Object.keys(doc._attachments);\n      var ays = akeys.filter(function(k){return re2.test(k)});\n      if(ays.length==0){\n         emit(['no_agg_plots',y,wim_dir[0],wim_dir[1]], null);\n      }\n    })\n  }\n}\n","reduce":"_count"},"pair_check_2":{"map":"function(doc) {\n  var re = new RegExp(\"wim\"); \n  if( re.test(doc._id) ){\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    \n    ys.forEach(function(y){\n      var wim_dir = doc._id.split('.').slice(1);\n      if(wim_dir[1]===undefined) return null;\n      if(doc[y].merged === undefined || doc[y].merged == 'todo'){\n        emit([wim_dir[0],wim_dir[1],y,'todo'], null);\n      }else if( doc[y].merged == 'nopair' ){\n       emit([wim_dir[0],wim_dir[1],y,'nopair'], null);\n      }\n    })\n  }\n}","reduce":"_count"},"imputed_status":{"map":"function(doc) {\n  var re = new RegExp(\"wim\");\n  if( re.test(doc._id) ){\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    wim_dir = doc._id.split('.').slice(1);\n    wim_dir[0]=+wim_dir[0]\n    //if(wim_dir.length==1){\n    // docs like wim.120 without a direction typically just say \"no data\"\n    //    return null\n    //}\n    ys.forEach(function(y){\n      if(doc[y+''].imputed === undefined){\n         emit([+y,'unprocessed'].concat(wim_dir), null)\n         return null\n      }\n      emit([+y,doc[y+''].imputed].concat(wim_dir), null)\n      return null\n    })\n  }\n}\n","reduce":"_count"},"plot_status":{"map":"function(doc) {\n  var re = new RegExp(\"wim\");\n  if( re.test(doc._id) ){\n    var years=[2007,2008,2009,2010,2011,2012,2013,2014]\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    var wim_dir = doc._id.split('.').slice(1);\n    if(wim_dir.length==1){\n      return null\n    }\n    // check either _attachments or detached\n    var plotlist = doc._attachments === undefined ? doc.detached : doc._attachments\n    if(plotlist === undefined){\n      return null\n    }\n    var plots = Object.keys(plotlist)\n    // sift though attached plots for each year\n    years.forEach(function(y){\n      if(ys.indexOf(y+'') === -1){\n         emit([y,'nothing',wim_dir[0],wim_dir[1]], null)\n         return null\n      }\n      var plot_regex = new RegExp(y+\"_agg\")\n      var year_plots = plots.filter(function(k){return plot_regex.test(k)})\n      if(year_plots === undefined || year_plots.length===0){\n        emit([y,'nothing',wim_dir[0],wim_dir[1]], null)\n      }else{\n        if(year_plots.length<9){\n          emit([y,'8agg',wim_dir[0],wim_dir[1]], null)\n        }else{\n          emit([y,'plots',wim_dir[0],wim_dir[1]], year_plots)\n        }\n      }\n      return null\n    })\n  }\n}\n","reduce":"_count"},"too_many_agg_plots":{"map":"function(doc) {\n  var re = new RegExp(\"wim\");\n  if( re.test(doc._id) ){\n    var years=[2007,2008,2009,2010,2011,2012,2013,2014]\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    var wim_dir = doc._id.split('.').slice(1);\n    if(wim_dir.length==1){\n      return null\n    }\n    // check either _attachments or detached\n    var plotlist = doc._attachments === undefined ? doc.detached : doc._attachments\n    if(plotlist === undefined){\n      return null\n    }\n    var plots = Object.keys(plotlist)\n    // sift though attached plots for each year\n    years.forEach(function(y){\n      if(ys.indexOf(y+'') === -1){\n         return null\n      }\n      var plot_regex = new RegExp(y+\"_agg\")\n      var year_plots = plots.filter(function(k){return plot_regex.test(k)})\n      if(year_plots === undefined || year_plots.length===0){\n        return null\n      }else{\n        if(year_plots.length>8){\n          emit([y,wim_dir[0],wim_dir[1]], null)\n        }\n      }\n      return null\n    })\n  }\n}\n","reduce":"_count"},"pair_check_yr":{"map":"function(doc) {\n  var re = new RegExp(\"wim\"); \n  if( re.test(doc._id) ){\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    \n    ys.forEach(function(y){\n      var wim_dir = doc._id.split('.').slice(1);\n      if(wim_dir[1]===undefined) return null;\n      //if(doc[y].paired === \"none\") return null\n      if(doc[y].neighbors !== undefined && doc[y].neighbors === \"none\"){\n        emit([+y,wim_dir[0],wim_dir[1],'no neighbors'], null);\n      }else if(doc[y].merged === undefined || doc[y].merged == 'todo'){\n        emit([+y,wim_dir[0],wim_dir[1],'todo'], null);\n      }else if( doc[y].merged == 'nopair' ){\n       emit([+y,wim_dir[0],wim_dir[1],'nopair'], null);\n      }\n    })\n  }\n}","reduce":"_count"},"merge_check_yr":{"map":"function(doc) {\n  var re = new RegExp(\"wim\"); \n  if( re.test(doc._id) ){\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    wim_dir = doc._id.split('.').slice(1);\n    if(wim_dir[1]===undefined) return null\n    wim_dir[0]=+wim_dir[0]\n\n    ys.forEach(function(y){\n      if(doc[y].merged === undefined ) return null\n      if(doc[y].merged === 'nopair' ) return null\n      var mgd = doc[y+''].merged\n      if(!Array.isArray(mgd)){\n         mgd = [mgd]\n      }\n      mgd.forEach(function(merg){\n         emit([+y].concat(wim_dir,merg), 1)\n         return null\n      })\n      return null\n    })\n  }\n}","reduce":"_count"},"pairRData":{"map":"function(doc) {\n  var re = new RegExp(\"^wim\"); \n  if( ! re.test(doc._id) ){\n    var re2 = new RegExp(\"^wim.*paired\\.RData$\"); \n    var keys = Object.keys(doc._attachments);\n    var ys = keys.filter(function(k){return re2.test(k)});\n    \n    ys.forEach(function(y){\n      var parts=y.split('.')\n      var doc_year = parts[5]\n      var site_dir = parts[0]+'.'+parts[1]+'.'+parts[2]\n      emit([+doc_year,site_dir,y],null)\n    })\n  }\n}","reduce":"_count"},"merge_yr_lanes_sorting":{"map":"function(doc) {\n  var re = new RegExp(\"wim\"); \n  if( re.test(doc._id) ){\n    wim_dir = doc._id.split('.').slice(1);\n    if(wim_dir[1]===undefined) return null\n    wim_dir[0]=+wim_dir[0]\n\n    var propk = Object.keys(doc.properties).sort()\n    var lanes = doc.properties[propk[0]].lanes\n\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n\n    ys.forEach(function(y){\n      if((doc[y].merged === undefined ) ||\n         (doc[y].merged === 'nopair' ) ){\n         emit([+y].concat(lanes,'nopair'), 1)\n         return null\n      }\n      var mgd = doc[y+''].merged\n      if(!Array.isArray(mgd)){\n         mgd = [mgd]\n      }\n      mgd.forEach(function(merg){\n         emit([+y].concat(lanes,'pair',+merg,wim_dir), 1)\n         return null\n      })\n      return null\n    })\n  }\n}","reduce":"_count"}},"detached":{},"attachment_db":"http://127.0.0.1:5984/vdsdata%2ftracking"}]}